#!/usr/bin/env python

"""Einthusan.com ServiceCode"""

BASE_URL = 'http://einthusan.com'
USER_AGENT = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:33.0) Gecko/20100101 Firefox/33.0'
HTTP.Headers['User-Agent'] = USER_AGENT
HTTP.Headers['Referer'] = BASE_URL

####################################################################################################
def MetadataObjectForURL(url):

	try:
		url = url.split('+&+')[1]
		html = HTML.ElementFromURL(url)
	except:
		raise Ex.MediaNotAvailable

	# setup title, if none then video offline
	title = html.xpath('//a[@class="movie-title"]/text()')
	if not title:
		raise Ex.MediaNotAvailable

	# setup thumb with fallback
	fallback = 'http://i.imgur.com/75YO83o.jpg'
	thumb = html.xpath('//a[@class="movie-cover-wrapper"]/img/@src')
	if not thumb:
		thumb = html.xpath('//div[@class="video-object-thumb"]/a/@src')
	thumb = thumb[0] if thumb else fallback
	# for some strange reason einthusan sometimes uses urls with un-escaped spaces in them
	thumb = thumb.replace(' ', '%20')
	if not thumb.startswith('http'):
		thumb = '{}/{}'.format(BASE_URL, thumb.split('/', 1)[1])

	# setup summary
	summary = html.xpath('//div[@class="movie-description"]//p[@class="desc_body"]/text()')
	summary = summary[0].strip() if summary else None

	return VideoClipObject(
		title=title[0].strip(),
		summary=summary,
		thumb=Resource.ContentsOfURLWithFallback([thumb, fallback])
		)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts=[PartObject(
				key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)]
			)
		]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):

	try:
		page = HTTP.Request(url.split('+&+')[0]).content
	except:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=page, http_headers={'User-Agent': USER_AGENT})

####################################################################################################
def TestURLs():

	test_urls = list()
	data = HTML.ElementFromURL('{}/movies/'.format(BASE_URL))

	for video in data.xpath('//div[@class="video-listing"]'):
		link = video.xpath('.//a/@href')[0]

		if not link.startswith('http'):
			link = '{}/{}'.foramt(BASE_URL, link.split('/',1)[1])
		test_urls.append(link)

		if len(test_urls) > 2:
			break

	return test_urls
